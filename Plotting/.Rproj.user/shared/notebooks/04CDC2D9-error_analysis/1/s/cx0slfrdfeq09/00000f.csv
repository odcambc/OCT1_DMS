"0",""
"0","get_del_length <- function(mutation_string) {"
"0","  lengths <- c()"
"0","  if(is.na(mutation_string)) {"
"0","    return(NA)"
"0","  }"
"0","  "
"0","  for (mutation in (str_split(mutation_string, ';'))[[1]]) {"
"0","    mutation = replace_na(mutation, ' ')"
"0","    "
"0","    if (length(mutation) > 1) {print(mutation_string)}"
"0","    "
"0","    if (str_detect(mutation, '^[A-Z][0-9]+_[A-Z][0-9]+del')) {"
"0","      deletion_match = str_match(mutation, '^[A-Z]([0-9]+)_[A-Z]([0-9]+)del')"
"0","      del_length = 3*(strtoi(deletion_match[3]) - strtoi(deletion_match[2]))"
"0","      lengths <- c(lengths, del_length)"
"0","    }"
"0","    "
"0","    if (str_detect(mutation, '^[A-Z][0-9]+del')) {"
"0","      del_length = 3"
"0","      lengths <- c(lengths, del_length)"
"0","    }"
"0","    "
"0","  }"
"0","  if (is.null(lengths)) {"
"0","    length = NA"
"0","  } else {"
"0","    length = sum(lengths)"
"0","  }"
"0","  return(length)"
"0","}"
"0",""
"0",""
"0","# These are short (1 or 2 nt) insertions or deletions. Otherwise, we have deletion,"
"0","# insertion, or insdel cases."
"0","# In this case, the deletion length is the number of gaps added in the"
"0","# nucleotide variant"
"0",""
"0","get_fs_length <- function(mutation_string, NT) {"
"0",""
"0","  if(is.na(mutation_string)) {"
"0","    return(NA)"
"0","  }"
"0","  "
"0","  if (str_detect(mutation_string, ';')) {"
"0","    return(NA)"
"0","  } else if (str_detect(mutation_string, ""^[A-Z][0-9]+[A-Z]fs*"")) {"
"0","    del_length = str_count(NT, "">-"")"
"0","    ins_length = str_count(NT, ""->"")"
"0","    return(ins_length - del_length)"
"0","  }"
"0","  return(NA)"
"0","}"
"0",""
"0","get_syn_length <- function(mutation_string, codon_length) {"
"0",""
"0","  if(is.na(mutation_string)) {"
"0","    return(codon_length)"
"0","  }"
"0","  return(NA)"
"0","}"
"0",""
"0","# This handles the case of substitutions with alternative codons"
"0",""
"0","get_missense_length <- function(mutation_string) {"
"0",""
"0","  if(is.na(mutation_string)) {"
"0","    return(NA)"
"0","  }"
"0","  "
"0","  if (str_detect(mutation_string, ';')) {"
"0","    return(NA)"
"0","  } else if (str_detect(mutation_string, ""^[A-Z][0-9]+_[A-Z][0-9]+"")) {"
"0","    return(3)"
"0","  } "
"0","  return(NA)"
"0","}"
"0",""
"0","# Handles ""complex"" mutations - insdel, multi-site insertions, or multi-site changes."
"0",""
"0","get_complex_length <- function(mutation_string, NT_length) {"
"0",""
"0","  if(is.na(mutation_string)) {"
"0","    return(NA)"
"0","  }"
"0","  "
"0","  if (str_detect(mutation_string, ';')) {"
"0","    return(NT_length[[1]])"
"0","  } else if (str_detect(mutation_string, ""insdel"")) {"
"0","    return(NT_length[[1]])"
"0","  }"
"0","  return(NA)"
"0","}"
"0",""
"0","get_1xins_length <- function(mutation_string) {"
"0","   if(is.na(mutation_string)) {"
"0","    return(NA)"
"0","  }"
"0","  "
"0","  if (str_detect(mutation_string, ';')) {"
"0","    return(NA)"
"0","  } else if (str_detect(mutation_string, ""[A-Z]([0-9]+)_[A-Z]([0-9]+)ins[A-Z]+"")) {"
"0","    match = str_match(mutation_string, ""[A-Z][0-9]+_[A-Z][0-9]+ins([A-Z]+)"")[2]"
"0","    length = nchar(match)*3"
"0","    return(length)"
"0","    "
"0","  }"
"0","  return(NA)"
"0","}"
"0",""
"0",""
"0","baseline_r <- baseline_r %>% rowwise() %>% mutate(del_len = get_del_length(mutations))"
"0","baseline_r <- baseline_r %>% rowwise() %>% mutate(ins_len = get_1xins_length(mutations))"
"0","baseline_r <- baseline_r %>% rowwise() %>% mutate(fs_len = get_fs_length(mutations, NT))"
"0","baseline_r <- baseline_r %>% rowwise() %>% mutate(syn_len = get_syn_length(mutations, length_codon))"
"0","baseline_r <- baseline_r %>% rowwise() %>% mutate(ms_len = get_missense_length(mutations))"
"0","baseline_r <- baseline_r %>% rowwise() %>% mutate(complex_len = get_complex_length(mutations, length_NT))"
"0","baseline_r <- baseline_r %>% rowwise() %>% mutate(complex_len = replace(complex_len, !is.na(del_len), NA))"
"0",""
"0","View("
"0","  baseline_r %>% mutate(ins_len = ifelse(fs_len > 1, fs_len, ins_len))"
"0",")"
"0","#baseline_r <- baseline_r %>% rowwise() %>% mutate(del_len = replace(del_len, fs_len < 1, -1*del_len))"
"0",""
"0","#baseline_r <- baseline_r %>% rowwise() %>% mutate(ins_len = case_when(X25==""Other""~ Other, TRUE ~ X25)"
"0",""
